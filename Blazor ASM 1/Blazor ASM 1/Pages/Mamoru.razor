@page "/mamoru"

<h3>mamoru</h3>
<style>
.input
{
	width:50px;
}
</style>


	@if(get_stat==false)
	{
		<button @onclick="onside">Stat making</button>
	}
	else
	{
		<h1> 캐릭터 이름 : </h1><input type="text"/><br/>

		<p1>성별 : @sex </p1><br />
		<p1>직군 : @jikgun (직군 다이스 : @rant ( @debug_1 ))</p1><br />
		<p1>등급 : @star </p1><br />
		<p1>
			@for(int j = 0 ; j < 6 ; j++)
			{
				<p1> @stats_vim[j] : @stats[j] </p1><br />
			}
		</p1>
		<p1> 추가능력 보유여부 : 
			@if (save) { <p1> YES </p1> }
			else{<p1> NO </p1>}</p1><br />
			<button @onclick = "kill"> 닫기 </button>
			<button @onclick = "onside"> 다시 굴리기 </button>
			
	}

	<h2> 계약 크기 : @sizes</h2>
	<select @bind = "sizes">
	@foreach(int val in values_for_soi)
	{
		<option value = "@val"><p1>@val</p1></option>
	}
	</select>
	<table>
		<thead>
			<th>보정 대상</th>
			<th>보정 수치</th>
			<th>보정 확정</th>
		</thead>
		<tbody>
			<tr><td><p1>@getJob(0) </p1></td><td><input type="number" @bind = "job_add_1" @bind:event="oninput" class = "input"/></td><td>@job_add_1</td></tr>
			<tr><td><p1>@getJob(1) </p1></td><td><input type="number" @bind = "job_add_2" @bind:event="oninput" class = "input"/></td><td>@job_add_2</td></tr>
			<tr><td><p1>@getJob(2) </p1></td><td><input type="number" @bind = "job_add_3" @bind:event="oninput" class = "input"/></td><td>@job_add_3</td></tr>
			<tr><td><p1>@getJob(3) </p1></td><td><input type="number" @bind = "job_add_4" @bind:event="oninput" class = "input"/></td><td>@job_add_4</td></tr>
			<tr><td><p1>@getJob(4) </p1></td><td><input type="number" @bind = "job_add_5" @bind:event="oninput" class = "input"/></td><td>@job_add_5</td></tr>
			<tr><td><p1>@getJob(5) </p1></td><td><input type="number" @bind = "job_add_6" @bind:event="oninput" class = "input"/></td><td>@job_add_6</td></tr>
			<tr><td><p1>@getJob(6) </p1></td><td><input type="number" @bind = "job_add_7" @bind:event="oninput" class = "input"/></td><td>@job_add_7</td></tr>
			<tr><td><p1>@getJob(7) </p1></td><td><input type="number" @bind = "job_add_8" @bind:event="oninput" class = "input"/></td><td>@job_add_8</td></tr>
			<tr><td><p1>@getJob(8) </p1></td><td><input type="number" @bind = "job_add_9" @bind:event="oninput" class = "input"/></td><td>@job_add_9</td></tr>
		</tbody>
	</table>




@code {
	public ushort pagement = 0;
	public int job_add_1 = 1 ;public int job_add_2 = 1 ;public int job_add_3 = 1 ;public int job_add_4 = 1 ;public int job_add_5 = 1 ;public int job_add_6 = 1 ;public int job_add_7 = 1 ;public int job_add_8 = 1 ;public int job_add_9 = 1 ;
	public int rant = 0;
	public int max_job = 9;
	public int debug_1 = 0;
	public bool get_stat = false;
	public string sex = "";
	public List<int> stats = new List<int> { };
	public List<string> stats_vim = new List<string> { "전투력","생존력","파괴력","기동력","의지","자율배분치" };
	public bool save = false;
	public string jikgun = "";
	public int star = 0;
	public int[] values_for_soi = {10000,25000,30000,50000};
	public int sizes = 25000;
	public void makingsex()
	{
		Random rand = new Random();
		int r1 = rand.Next(3) + 1;
		if (r1 == 1)
		{
			sex = "여성"; // 여성
		}
		else
		{
			sex = "남성"; //남성
		}
	}

	public int firstDice()
	{
		Random rand = new Random();
		int r1 = rand.Next(6) + 1;
		return r1;
	}

	public List<int> secondDice(int first)
	{
		Random rand = new Random();
		List<int> retu = new List<int>() { };
		if(first<=2)
		{
			for(int i = 0; i < 6; i++)
			{
				retu.Add(rand.Next(4) + 1);
			};
		}else if(first<=5)
		{
			for(int i = 0; i < 6; i++)
			{
				retu.Add(rand.Next(6) + 1);
			};
		}
		else if(first==6)
		{
			for(int i = 0; i < 6; i++)
			{
				retu.Add(rand.Next(10) + 1);
			};
		}
		retu[1] += 5;
		//전투력 생존력 파괴력 기동력 의지 자율배분수치
		return retu;
	}

	public bool lastDice()
	{
		Random rand = new Random();
		int r1 = rand.Next(6) + 1;
		return r1 > 4;
	}
	public string getJob(int index)
	{
		string[] pp = { "트루퍼", "건파이터", " 샤프슈터 " , "헤비거너" , "파이로매니악" , "브롤러", "버글러", "데몰리션맨", "미정 직군" };
		return pp[index];

	}
	public void onside()
	{
		get_stat = true;
		makingsex();
		if(sizes ==25000)
		{
			star = firstDice();
			stats = secondDice(star);
		}
		else if(sizes == 10000)
		{
			star = sizes;
			stats = statDices(4, 0);
		}
		else if(sizes == 30000)
		{
			star = sizes;
			stats = statDices(4, 2);
		}
		else if(sizes == 50000)
		{
			star = sizes;
			stats = statDices(6, 2);
		}
		save = lastDice();
		rant = thirdDice();
		jikgun = getJob(rant);
	}
	public int thirdDice()
	{
		Random rand = new Random();
		int val = rand.Next(job_add_1 + job_add_2 + job_add_3 + job_add_4 + job_add_5 + job_add_6 + job_add_7 + job_add_8 + job_add_9);
		int kio = job_add_1;
		debug_1 = val;
		if (proci_1(val,kio)) return 0;
		kio += job_add_2;
		if (proci_1(val,kio)) return 1;
		kio += job_add_3;
		if (proci_1(val,kio)) return 2;
		kio += job_add_4;
		if (proci_1(val,kio)) return 3;
		kio += job_add_5;
		if (proci_1(val,kio)) return 4;
		kio += job_add_6;
		if (proci_1(val,kio)) return 5;
		kio += job_add_7;
		if (proci_1(val,kio)) return 6;
		kio += job_add_8;
		if (proci_1(val,kio)) return 7;
		kio += job_add_9;
		if (proci_1(val, kio)) return 8;
		else return 8;

	}
	public bool proci_1 (int val,int kio)
	{
		return val < kio;
	}
	public void kill()
	{
		get_stat = false;

	}
	public List<int> statDices(int max, int add)
	{
		Random rand = new Random();
		List<int> retu = new List<int> { };
		for(int i = 0; i < 6; i++)
		{
			retu.Add(rand.Next(max) + 1 + add);
		};
		return retu;
	}

	//d4+2
}
