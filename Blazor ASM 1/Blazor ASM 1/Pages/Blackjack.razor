@page "/blackjack";
<center>
	
	<h3>Blackjack</h3>

	
	@if (started)
	{
		<hr />
		@foreach(card card in Cards_host)
		{
			if (card.showCardNumber() != 1)
			{
				<p1>  @card.showCardType() , @card.showCardNumber() (@card.number)|</p1>
			}
			else
			{
				<p1>  @card.showCardType() , Ace! (@card.number)|</p1>
			}
		}
		<br> <p1> hosts count : @displaySum(Cards_host)</p1>
		<hr />
		@foreach(card card in Cards_player)
		{
			if (card.showCardNumber() != 1 &&card.showCardNumber() < 10)
			{
				<p1>  @card.showCardType() , @card.showCardNumber() (@card.number)|</p1>
			}
			else if(card.showCardNumber() == 1)
			{
				<p1>  @card.showCardType() , Ace! (@card.number)|</p1>
			}else{
				<p1>  @card.showCardType() , @upper10(card.showCardNumber()) (@card.number)| </p1>
			}
		}
		<br> <p1> your count : @displaySum(Cards_player)</p1>
		<hr />
		@if(!(displaySum(Cards_player)==21)&&getBusted(Cards_player)&&getBusted(Cards_host)&&!ended)
		{
			<button @onclick="push_player"> Push! </button>
			<button @onclick="select_stop">Stop</button>
			@if (Cards_player.Count == 2 && Cards_player[0].showCardNumber() == Cards_player[1].showCardNumber())
			{
				<button @onclick="select_split"> Split! </button>
			}
		}
		else 
		{
			if (displaySum(Cards_player)==21||(getBusted(Cards_player)&&!getBusted(Cards_host))||(displaySum(Cards_host)<displaySum(Cards_player)&&getBusted(Cards_player)))
			{
				if (!getBusted(Cards_host))
				{
					<p1> host got a bust ! </p1>
					<br />
				}
				<button @onclick="clearCard"> You Win! </button>
			}
			else if (displaySum(Cards_host)==21||(!getBusted(Cards_player) && getBusted(Cards_host))||((displaySum(Cards_host)>displaySum(Cards_player)&&getBusted(Cards_host))))
			{
				if (!getBusted(Cards_host))
				{
					<p1> you got a bust ! </p1>
					<br />
				}
				<button @onclick="clearCard"> You Lose! </button>
			}
			else
			{
				<button @onclick="clearCard">Draw !</button>
			}
		}
	}
	else
	{
		<button @onclick="initAndReady">Start!</button>
	}

	<br />
	<p1> not yet...</p1>

</center>
@code 
{
	public string upper10(int num) {
		string[] avs = new string[] { "J", "Q", "K" };
		return avs[num - 10];
	}
	public class card
	{ 
		// 12마다 반복, 1다이아, 2클로버 3 하트 4스페이드
		public int number; 
		public int randnum;
		public string showCardType()
		{
			string[] type = new string[] { "heart", "spade", "cloba", "diamond","Jocker" };
			return type[(int)(Math.Truncate(this.number / 12.0))];
		}
		public int showCardNumber()
		{
			return (((this.number) % 12)+1);
		}
	};
	private bool ended=false;
	private List<card> Cards = new List<card>();
	private List<card> Cards_host = new List<card>();
	private List<card> Cards_player = new List<card>();
	private bool started = false;
	protected void clearCard()
	{
		Cards_host.Clear();
		Cards_player.Clear();
		Cards.Clear();
		started = false;
		ended = false;
	}
	protected void select_split()
	{

	}
	protected void select_stop()
	{
		while(countCard(Cards_host)<21)
		{
			int summary = countCard(Cards_host);
			if (summary >= countCard(Cards_player))
			{
				break;
			}
			else
			{
				if (summary < 13)
				{
					push(true);
					continue;
				}
				else
				{
					Random Randoms = new Random();
					int rndc = Randoms.Next(0, 21 - summary);
					if (rndc < 3)
					{
						break;
					}
					else
					{
						push(true);
						continue;
					}
				}
			}
		}
		ended = true;


	}

	protected void initAndReady()
	{
		started = true;

		foreach(int randomint in Enumerable.Range(0,49))
		{
			Random rdn_class = new Random();
			int length_of_card=Cards.Count;
			int counter = rdn_class.Next(length_of_card);
			card insidecard = new card();
			insidecard.number = randomint;
			Cards.Insert(counter, insidecard);
		}
		Cards_player.Add(Cards[0]);
		Cards_player.Add(Cards[1]);
		Cards_host.Add(Cards[2]);
		Cards_host.Add(Cards[3]);
		Cards.RemoveRange(0, 4);
	}
	protected void push_player()
	{
		push(false);
	}
	protected bool push(bool host_mode)
	{
		// 터지면 false를, 터지지 않는다면 true를 return 함.
		bool no_busted = true;
		card pushed_card = new card();
		pushed_card=Cards[0];
		if (host_mode == true)
		{
			Cards_host.Add(pushed_card);
			no_busted=getBusted(Cards_host);
		}
		else
		{
			Cards_player.Add(pushed_card);
			no_busted=getBusted(Cards_player);
		}
		Cards.RemoveAt(0);
		if (no_busted)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	protected bool getBusted(List<card> input)
	{
		// 터지면 false를, 터지지 않는다면 true를 return 함.
		int counter = countCard(input);
		if(counter>21){ return false; }else{ return true; }
	}
	protected int displaySum(List<card> input)
	{
		return countCard(input);
	}
	protected int countCard(List<card> input)
	{
		int allcard_summary = 0;
		bool have_ace=false;
		foreach (card card in input)
		{

			if ((card.number % 12)  != 0 && (card.number % 12)  <9)
			{
				allcard_summary += ((card.number % 12)+1);
			}
			else if ((card.number % 12) >=9)
			{ allcard_summary += 10; } 
			else
			{
				have_ace = true;
				continue;
			}
		}
		if (have_ace)
		{
			int acecount=0;
			foreach(card card in input)
			{
				if((card.number % 12) == 0)
				{
					acecount++;
					if (allcard_summary + 11 > 21)
					{
						allcard_summary += 1;
					}
					else
					{
						if (acecount >= 2)
						{
							allcard_summary += 1;
						}
						else
						{
							allcard_summary += 11;
						}

					}
				}
			}

		}
		return allcard_summary;
	}
	}

